# Generated by Django 5.0.6 on 2024-06-18 09:35

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Earbuds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('brand', models.CharField(max_length=255)),
                ('img', models.ImageField(null=True, upload_to='products/')),
                ('img_url', models.URLField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('review_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('pros', models.JSONField(blank=True, default=list)),
                ('cons', models.JSONField(blank=True, default=list)),
                ('reviews', models.JSONField(blank=True, default=list)),
                ('reddit_comments', models.JSONField(blank=True, default=list)),
                ('earphone_type', models.CharField(blank=True, default='earbuds', max_length=20)),
                ('wireless', models.BooleanField(blank=True, null=True)),
                ('battery_life', models.FloatField(blank=True, null=True)),
                ('active_noise_cancellation', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Headphones',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('brand', models.CharField(max_length=255)),
                ('img', models.ImageField(null=True, upload_to='products/')),
                ('img_url', models.URLField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('review_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('pros', models.JSONField(blank=True, default=list)),
                ('cons', models.JSONField(blank=True, default=list)),
                ('reviews', models.JSONField(blank=True, default=list)),
                ('reddit_comments', models.JSONField(blank=True, default=list)),
                ('wireless', models.BooleanField(null=True)),
                ('battery_life', models.FloatField(blank=True, null=True)),
                ('active_noise_cancellation', models.BooleanField(null=True)),
                ('mic', models.BooleanField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Keyboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('brand', models.CharField(max_length=255)),
                ('img', models.ImageField(null=True, upload_to='products/')),
                ('img_url', models.URLField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('review_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('pros', models.JSONField(blank=True, default=list)),
                ('cons', models.JSONField(blank=True, default=list)),
                ('reviews', models.JSONField(blank=True, default=list)),
                ('reddit_comments', models.JSONField(blank=True, default=list)),
                ('wireless', models.BooleanField(null=True)),
                ('size', models.IntegerField(blank=True, null=True)),
                ('key_switches', models.CharField(max_length=50, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Laptop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('brand', models.CharField(max_length=255)),
                ('img', models.ImageField(null=True, upload_to='products/')),
                ('img_url', models.URLField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('review_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('pros', models.JSONField(blank=True, default=list)),
                ('cons', models.JSONField(blank=True, default=list)),
                ('reviews', models.JSONField(blank=True, default=list)),
                ('reddit_comments', models.JSONField(blank=True, default=list)),
                ('battery_life', models.JSONField(blank=True, default=list)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('screen_size', models.FloatField(blank=True, null=True)),
                ('screen_resolution', models.CharField(max_length=100, null=True)),
                ('processor', models.CharField(max_length=100, null=True)),
                ('os_version', models.CharField(max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Monitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('brand', models.CharField(max_length=255)),
                ('img', models.ImageField(null=True, upload_to='products/')),
                ('img_url', models.URLField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('review_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('pros', models.JSONField(blank=True, default=list)),
                ('cons', models.JSONField(blank=True, default=list)),
                ('reviews', models.JSONField(blank=True, default=list)),
                ('reddit_comments', models.JSONField(blank=True, default=list)),
                ('screen_size', models.IntegerField(blank=True, null=True)),
                ('screen_resolution', models.CharField(max_length=50, null=True)),
                ('refresh_rate', models.IntegerField(blank=True, null=True)),
                ('panel_type', models.CharField(max_length=20, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Mouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('brand', models.CharField(max_length=255)),
                ('img', models.ImageField(null=True, upload_to='products/')),
                ('img_url', models.URLField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('review_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('pros', models.JSONField(blank=True, default=list)),
                ('cons', models.JSONField(blank=True, default=list)),
                ('reviews', models.JSONField(blank=True, default=list)),
                ('reddit_comments', models.JSONField(blank=True, default=list)),
                ('wireless', models.BooleanField(null=True)),
                ('buttons_count', models.IntegerField(null=True)),
                ('dpi', models.IntegerField(null=True)),
                ('weight', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Phone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('brand', models.CharField(max_length=255)),
                ('img', models.ImageField(null=True, upload_to='products/')),
                ('img_url', models.URLField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('review_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('pros', models.JSONField(blank=True, default=list)),
                ('cons', models.JSONField(blank=True, default=list)),
                ('reviews', models.JSONField(blank=True, default=list)),
                ('reddit_comments', models.JSONField(blank=True, default=list)),
                ('battery_life', models.JSONField(blank=True, default=list)),
                ('os_version', models.CharField(max_length=50, null=True)),
                ('size', models.IntegerField(blank=True, null=True)),
                ('screen_resolution', models.CharField(max_length=50, null=True)),
                ('screen_refresh_rate', models.IntegerField(blank=True, null=True)),
                ('processor', models.CharField(max_length=50, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('brand', models.CharField(max_length=255)),
                ('img', models.ImageField(null=True, upload_to='products/')),
                ('img_url', models.URLField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('review_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('pros', models.JSONField(blank=True, default=list)),
                ('cons', models.JSONField(blank=True, default=list)),
                ('reviews', models.JSONField(blank=True, default=list)),
                ('reddit_comments', models.JSONField(blank=True, default=list)),
                ('portable', models.BooleanField(blank=True, null=True)),
                ('bluetooth', models.BooleanField(blank=True, null=True)),
                ('wifi', models.BooleanField(blank=True, null=True)),
                ('speakerphone', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Television',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('brand', models.CharField(max_length=255)),
                ('img', models.ImageField(null=True, upload_to='products/')),
                ('img_url', models.URLField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('review_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('pros', models.JSONField(blank=True, default=list)),
                ('cons', models.JSONField(blank=True, default=list)),
                ('reviews', models.JSONField(blank=True, default=list)),
                ('reddit_comments', models.JSONField(blank=True, default=list)),
                ('screen_size', models.IntegerField(blank=True, null=True)),
                ('screen_resolution', models.CharField(max_length=50, null=True)),
                ('panel_type', models.CharField(max_length=50, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.EmailField(max_length=254, unique=True)),
                ('date_created', models.DateField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_id', models.IntegerField()),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('product_category', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='api.category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_histories', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
